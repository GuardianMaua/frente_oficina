name: Deploy CTFs Web

on:
  workflow_dispatch:
    inputs:
      selected_ctfs:
        description: "Lista dos nomes das pastas dos CTFs web que deseja subir, separados por vírgula sem espaço (ex: ctf1,ctf2,ctf3)."
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Instalar ou atualizar AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configurar AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set aws_session_token "${{ secrets.AWS_SESSION_TOKEN }}"
          aws configure set region "${{ secrets.AWS_REGION }}"
          aws sts get-caller-identity

      - name: Criar instâncias EC2 para CTFs selecionados
        run: |
          mkdir -p tmp
          echo "${{ github.event.inputs.selected_ctfs }}" | tr ',' '\n' > tmp/ctfs.txt

          > deployed_instances.txt

          while read CTF_NAME; do
            CTF_DIR="Web/$CTF_NAME"
            if [ -d "$CTF_DIR" ]; then
              echo "Criando instância para $CTF_NAME..."

              INSTANCE_ID=$(aws ec2 run-instances \
                --image-id "${{ secrets.AWS_AMI_ID }}" \
                --instance-type "${{ secrets.AWS_INSTANCE_TYPE }}" \
                --key-name "${{ secrets.AWS_KEY_PAIR_NAME }}" \
                --security-group-ids "${{ secrets.AWS_SECURITY_GROUP_ID }}" \
                --region "${{ secrets.AWS_REGION }}" \
                --query 'Instances[0].InstanceId' \
                --output text)

              echo "Aguardando a instância iniciar..."
              aws ec2 wait instance-running --instance-ids "$INSTANCE_ID" --region "${{ secrets.AWS_REGION }}"

              PUBLIC_IP=$(aws ec2 describe-instances \
                --instance-ids "$INSTANCE_ID" \
                --query 'Reservations[0].Instances[0].PublicIpAddress' \
                --output text --region "${{ secrets.AWS_REGION }}")

              echo "$CTF_NAME:$INSTANCE_ID:$PUBLIC_IP" >> deployed_instances.txt
              echo "Instância de $CTF_NAME criada com IP: $PUBLIC_IP"
            else
              echo "⚠️  CTF $CTF_NAME não encontrado em Web/"
            fi
          done < tmp/ctfs.txt

      - name: Criar arquivo da chave privada
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.AWS_KEY_PAIR_NAME }}.pem
          chmod 600 ~/.ssh/${{ secrets.AWS_KEY_PAIR_NAME }}.pem
          cat deployed_instances.txt

      - name: Configurar e rodar os CTFs nas EC2
        run: |
          # Ler as instâncias implementadas e configurar cada CTF
          cat deployed_instances.txt | while IFS=: read -r CTF_NAME INSTANCE_ID PUBLIC_IP; do
            echo "Configurando $CTF_NAME em $PUBLIC_IP..."

            ssh -n -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.AWS_KEY_PAIR_NAME }}.pem ec2-user@$PUBLIC_IP '
              set -euxo pipefail

              # Instalação do Docker e Git
              if [ -f /etc/os-release ]; then . /etc/os-release;
                if [[ "$ID" == "amzn" ]]; then
                  sudo yum update -y && sudo yum install -y docker git
                  sudo systemctl enable docker
                  sudo systemctl start docker
                  sudo usermod -aG docker ec2-user
                elif [[ "$ID" == "ubuntu" ]]; then
                  sudo apt update -y && sudo apt install -y docker.io git
                  sudo systemctl enable docker
                  sudo systemctl start docker
                  sudo usermod -aG docker $USER
                fi
              fi

              # Instalação do Docker Compose plugin
              mkdir -p ~/.docker/cli-plugins &&
              curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose &&
              chmod +x ~/.docker/cli-plugins/docker-compose

              # Clonar ou atualizar repositório
              if [ ! -d ~/CTFs ]; then
                git clone https://github.com/GuardianMaua/frente_oficina.git ~/CTFs
              else
                cd ~/CTFs && git pull
              fi

              cd ~/CTFs/Web/'$CTF_NAME'

              # Backend
              if [ -d "backend" ]; then
                echo "Criando rede Docker e subindo backend..."
                sudo docker network create '${CTF_NAME}'_network || true
                cd backend
                sudo docker build -t '${CTF_NAME}'_backend .
                sudo docker run -d --name '${CTF_NAME}'_backend --network '${CTF_NAME}'_network -p 3000:3000 '${CTF_NAME}'_backend
                cd ..
                BACKEND_URL=http://'${CTF_NAME}'_backend:3000
              else
                BACKEND_URL=""
              fi

              # Frontend
              echo "Subindo frontend..."
              if [ -f "Dockerfile" ]; then
                sudo docker build -t '${CTF_NAME}'_frontend .
                if [ -d "backend" ]; then
                  sudo docker run -d --name '${CTF_NAME}'_frontend --network '${CTF_NAME}'_network -p 80:80 '${CTF_NAME}'_frontend
                else
                  sudo docker run -d --name '${CTF_NAME}'_frontend -p 80:80 '${CTF_NAME}'_frontend
                fi
              else
                echo "⚠️  Dockerfile não encontrado para o frontend de ${CTF_NAME}. Ignorando frontend."
              fi
            '
          done
