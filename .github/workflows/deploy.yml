name: Deploy CTFs Web

on:
  workflow_dispatch:
    inputs:
      selected_ctfs:
        description: "Lista dos nomes das pastas dos CTFs web que deseja subir, separados por vírgula sem espaço (ex: ctf1,ctf2,ctf3)."
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Instalar ou atualizar AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configurar AWS CLI
        run: |
          echo "Configurando credenciais AWS..."
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
          aws configure set region ${{ secrets.AWS_REGION }}

          # Verificar se as credenciais estão sendo configuradas corretamente
          aws sts get-caller-identity

      - name: Criar instâncias EC2 para CTFs selecionados
        run: |
          mkdir -p tmp
          echo "${{ github.event.inputs.selected_ctfs }}" | tr ',' '\n' > tmp/ctfs.txt

          while read CTF_NAME; do
            CTF_DIR="Web/$CTF_NAME"
            if [ -d "$CTF_DIR" ]; then
              echo "Criando instância para $CTF_NAME..."

              INSTANCE_ID=$(aws ec2 run-instances \
                --image-id ${{ secrets.AWS_AMI_ID }} \
                --instance-type ${{ secrets.AWS_INSTANCE_TYPE }} \
                --key-name ${{ secrets.AWS_KEY_PAIR_NAME }} \
                --security-group-ids ${{ secrets.AWS_SECURITY_GROUP_ID }} \
                --region ${{ secrets.AWS_REGION }} \
                --query 'Instances[0].InstanceId' \
                --output text)

              echo "Aguardando a instância iniciar..."
              aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ${{ secrets.AWS_REGION }}

              PUBLIC_IP=$(aws ec2 describe-instances \
                --instance-ids $INSTANCE_ID \
                --query 'Reservations[0].Instances[0].PublicIpAddress' \
                --output text --region ${{ secrets.AWS_REGION }})

              echo "Instância de $CTF_NAME criada com IP: $PUBLIC_IP"
              echo "$CTF_NAME:$INSTANCE_ID:$PUBLIC_IP" >> deployed_instances.txt
            else
              echo "CTF $CTF_NAME não encontrado em Web/"
            fi
          done < tmp/ctfs.txt

      - name: Criar arquivo da chave privada
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/${{ secrets.AWS_KEY_PAIR_NAME }}.pem
          chmod 600 ~/.ssh/${{ secrets.AWS_KEY_PAIR_NAME }}.pem

      - name: Configurar e rodar os CTFs nas EC2
        run: |
          while IFS=: read -r CTF_NAME INSTANCE_ID PUBLIC_IP; do
            echo "Configurando $CTF_NAME em $PUBLIC_IP..."

            ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.AWS_KEY_PAIR_NAME }}.pem ec2-user@$PUBLIC_IP "
              set -e

              echo 'Detectando sistema operacional...'
              if [ -f /etc/os-release ]; then
                . /etc/os-release
                if [[ \"\$ID\" == \"amzn\" ]]; then
                  echo 'Instalando pacotes no Amazon Linux...'
                  sudo yum update -y && sudo yum install -y docker git || { echo 'Falha ao instalar pacotes no Amazon Linux'; exit 1; }
                  sudo systemctl start docker && sudo usermod -aG docker ec2-user
                elif [[ \"\$ID\" == \"ubuntu\" ]]; then
                  echo 'Instalando pacotes no Ubuntu...'
                  sudo apt update -y && sudo apt install -y docker.io git || { echo 'Falha ao instalar pacotes no Ubuntu'; exit 1; }
                  sudo systemctl start docker && sudo usermod -aG docker \$USER
                fi
              fi

              echo 'Instalando Docker Compose...'
              mkdir -p ~/.docker/cli-plugins
              curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 \
                -o ~/.docker/cli-plugins/docker-compose || { echo 'Falha no download do Docker Compose'; exit 1; }
              chmod +x ~/.docker/cli-plugins/docker-compose

              echo 'Clonando ou atualizando repositório...'
              if [ ! -d ~/CTFs ]; then
                git clone https://github.com/GuardianMaua/frente_oficina.git ~/CTFs || { echo 'Falha ao clonar repositório'; exit 1; }
              else
                cd ~/CTFs && git pull || { echo 'Falha ao fazer git pull'; exit 1; }
              fi

              echo 'Entrando no diretório do CTF...'
              cd ~/CTFs/Web/$CTF_NAME || { echo 'Diretório Web/$CTF_NAME não encontrado'; exit 1; }

              if [ -d 'backend' ]; then
                echo 'Subindo backend...'
                cd backend
                sudo docker compose up --build -d || { echo 'Falha ao subir backend'; exit 1; }
                BACKEND_IP=\$(hostname -I | awk '{print \$1}')
                cd ..
              fi

              if [ -f '.env.template' ]; then
                echo 'Configurando .env do frontend...'
                cp .env.template .env
                sed -i \"s|BACKEND_URL=.*|BACKEND_URL=http://\$BACKEND_IP:3000|\" .env
              fi

              echo 'Subindo frontend...'
              sudo docker compose up --build -d || { echo 'Falha ao subir frontend'; exit 1; }

              echo '✅ Deploy finalizado com sucesso para $CTF_NAME'
            "
          done < deployed_instances.txt
